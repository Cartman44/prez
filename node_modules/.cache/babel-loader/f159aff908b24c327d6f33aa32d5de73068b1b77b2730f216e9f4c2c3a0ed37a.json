{"ast":null,"code":"import React,{useState,useEffect}from'react';import{ScatterChart,Scatter,XAxis,YAxis,CartesianGrid,Tooltip,ResponsiveContainer,Label,BarChart,Bar,PieChart,Pie,Cell,Legend}from'recharts';import _ from'lodash';import Papa from'papaparse';import'./App.css';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";function App(){const[data,setData]=useState([]);const[activeCandidate,setActiveCandidate]=useState('victorPonta');const[correlations,setCorrelations]=useState({});const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[viewMode,setViewMode]=useState('correlation');// correlation, countyRanking, candidateComparison\nconst[selectedCounty,setSelectedCounty]=useState(null);const[sortBy,setSortBy]=useState('turnout');// turnout, candidate\nuseEffect(()=>{const fetchData=async()=>{try{// Încarcă fișierele CSV folosind fetch\nconst voterResponse=await fetch(`${process.env.PUBLIC_URL}/presence_now (1).csv`);const trendsResponse=await fetch(`${process.env.PUBLIC_URL}/geoMap (1).csv`);if(!voterResponse.ok||!trendsResponse.ok){throw new Error('Eroare la încărcarea fișierelor CSV');}const voterData=await voterResponse.text();const trendsData=await trendsResponse.text();// Procesează datele\nconst processedData=processData(voterData,trendsData);setData(processedData.combinedData);setCorrelations(processedData.correlations);setLoading(false);}catch(error){console.error('Eroare la procesarea datelor:',error);setError(error.message);setLoading(false);}};fetchData();},[]);const processData=(voterRawData,trendsRawData)=>{// Parse voter data\nconst parsedVoterData=Papa.parse(voterRawData,{header:true,skipEmptyLines:true,dynamicTyping:true});// Parse Google Trends data manually pentru formatul specific\nconst lines=trendsRawData.split('\\n').filter(line=>line.trim());// Găsim linia care conține headerele (de obicei linia 3)\nlet headerLineIndex=-1;for(let i=0;i<lines.length;i++){if(lines[i].startsWith('Regiune,')){headerLineIndex=i;break;}}if(headerLineIndex===-1){console.error('Nu s-a găsit linia cu headere în fișierul geoMap');return{combinedData:[],correlations:{}};}// Extragem headerele\nconst headers=lines[headerLineIndex].split(',').map(h=>h.trim());// Datele încep după linia de headere\nconst trendsData=[];for(let i=headerLineIndex+1;i<lines.length;i++){if(!lines[i].trim())continue;const values=lines[i].split(',').map(val=>val.trim());if(values.length>=headers.length){const row={County:values[0].replace('Județul ','').replace('Municipiul ','')};// Numele candidaților din headere\nconst candidateNames={'Nicusor dan: (04.04.2025 – 04.05.2025)':'nicusorDan','Crin Antonescu: (04.04.2025 – 04.05.2025)':'crinAntonescu','George Simion: (04.04.2025 – 04.05.2025)':'georgeSimion','Victor Ponta: (04.04.2025 – 04.05.2025)':'victorPonta'};// Adăugăm datele pentru fiecare candidat\nfor(let j=1;j<headers.length;j++){const candidateKey=candidateNames[headers[j]];if(candidateKey&&values[j]){// Convertim valoarea procentuală în număr\nrow[candidateKey]=parseFloat(values[j].replace(' %',''));}}trendsData.push(row);}}// Group voter data by county\nconst voterDataByCounty=_.groupBy(parsedVoterData.data,'Judet');// Calculate totals for each county\nconst voterStats={};for(const county in voterDataByCounty){if(county){const countyData=voterDataByCounty[county];// Sum up registered voters and turnout\nconst totalRegistered=_.sumBy(countyData,'Înscriși pe liste permanente')||0;const totalLP=_.sumBy(countyData,'LP')||0;// Turnout count\n// Calculate turnout percentage\nconst turnoutPercentage=totalRegistered>0?totalLP/totalRegistered*100:0;voterStats[county]={totalRegistered,totalLP,turnoutPercentage};}}// Map county names\nconst countyMapping={'Alba':'AB','Arad':'AR','Argeș':'AG','Bacău':'BC','Bihor':'BH','Bistrița-Năsăud':'BN','Botoșani':'BT','Brașov':'BV','Brăila':'BR','Buzău':'BZ','Caraș-Severin':'CS','Cluj':'CJ','Constanța':'CT','Covasna':'CV','Călărași':'CL','Dolj':'DJ','Dâmbovița':'DB','Galați':'GL','Giurgiu':'GR','Gorj':'GJ','Harghita':'HR','Hunedoara':'HD','Ialomița':'IL','Iași':'IS','Ilfov':'IF','Maramureș':'MM','Mehedinți':'MH','Mureș':'MS','Neamț':'NT','Olt':'OT','Prahova':'PH','Satu Mare':'SM','Sibiu':'SB','Suceava':'SV','Sălaj':'SJ','Teleorman':'TR','Timiș':'TM','Tulcea':'TL','Vaslui':'VS','Vrancea':'VN','Vâlcea':'VL','București':'B'};// Combine datasets\nconst combinedData=[];for(const trendsRow of trendsData){const countyName=trendsRow.County;const countyCode=countyMapping[countyName];if(countyCode&&voterStats[countyCode]){combinedData.push({county:countyName,countyCode:countyCode,turnoutPercentage:voterStats[countyCode].turnoutPercentage,nicusorDan:trendsRow.nicusorDan,crinAntonescu:trendsRow.crinAntonescu,georgeSimion:trendsRow.georgeSimion,victorPonta:trendsRow.victorPonta});}}// Calculate correlations\nconst calculateCorrelation=(x,y)=>{const n=x.length;if(n===0||n!==y.length)return 0;const sumX=x.reduce((a,b)=>a+b,0);const sumY=y.reduce((a,b)=>a+b,0);const sumXY=x.reduce((a,b,i)=>a+b*y[i],0);const sumX2=x.reduce((a,b)=>a+b*b,0);const sumY2=y.reduce((a,b)=>a+b*b,0);const numerator=n*sumXY-sumX*sumY;const denominator=Math.sqrt((n*sumX2-sumX*sumX)*(n*sumY2-sumY*sumY));return denominator===0?0:numerator/denominator;};// Calculate correlation for each candidate\nconst turnoutValues=combinedData.map(d=>d.turnoutPercentage);const candidates=['nicusorDan','crinAntonescu','georgeSimion','victorPonta'];const correlations={};candidates.forEach(candidate=>{const candidateValues=combinedData.map(d=>d[candidate]);correlations[candidate]=calculateCorrelation(turnoutValues,candidateValues);});return{combinedData,correlations};};// Format correlation for display\nconst formatCorrelation=value=>{return value.toFixed(3);};// Get title for the candidate\nconst getCandidateTitle=candidate=>{switch(candidate){case'nicusorDan':return'Nicușor Dan';case'crinAntonescu':return'Crin Antonescu';case'georgeSimion':return'George Simion';case'victorPonta':return'Victor Ponta';default:return candidate;}};// Determine color for a candidate\nconst getCandidateColor=candidate=>{switch(candidate){case'nicusorDan':return'#8884d8';case'crinAntonescu':return'#82ca9d';case'georgeSimion':return'#ffc658';case'victorPonta':return'#ff8042';default:return'#000000';}};const handleCandidateChange=candidate=>{setActiveCandidate(candidate);};const handleViewModeChange=mode=>{setViewMode(mode);};// Round numbers for more readable display\nconst formatNumber=num=>{return num.toFixed(2);};// Sortează județele în funcție de criteriul selectat\nconst getSortedCounties=()=>{if(sortBy==='turnout'){return[...data].sort((a,b)=>b.turnoutPercentage-a.turnoutPercentage);}else{return[...data].sort((a,b)=>b[activeCandidate]-a[activeCandidate]);}};// Tooltip personalizat pentru graficul de corelație\nconst CustomTooltip=_ref=>{let{active,payload}=_ref;if(active&&payload&&payload.length){const data=payload[0].payload;return/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-4 border border-gray-300 rounded shadow-lg\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"font-bold text-lg\",children:[data.county,\" (\",data.countyCode,\")\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Prezen\\u021B\\u0103 la vot: \",formatNumber(data.turnoutPercentage),\"%\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[getCandidateTitle(activeCandidate),\": \",data[activeCandidate],\"%\"]})]});}return null;};// Grafic de corelație între prezența la vot și interesul de căutare\nconst renderCorrelationChart=()=>{return/*#__PURE__*/_jsx(\"div\",{className:\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\",children:data.length>0?/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(ScatterChart,{margin:{top:20,right:30,bottom:30,left:60},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{type:\"number\",dataKey:\"turnoutPercentage\",name:\"Prezen\\u021B\\u0103 la vot\",domain:[15,35],children:/*#__PURE__*/_jsx(Label,{value:\"Prezen\\u021B\\u0103 la vot (%)\",position:\"bottom\",offset:0})}),/*#__PURE__*/_jsx(YAxis,{type:\"number\",dataKey:activeCandidate,name:getCandidateTitle(activeCandidate),domain:[0,70],children:/*#__PURE__*/_jsx(Label,{value:`Interes de căutare pentru ${getCandidateTitle(activeCandidate)} (%)`,angle:-90,position:\"left\",style:{textAnchor:'middle'}})}),/*#__PURE__*/_jsx(Tooltip,{content:/*#__PURE__*/_jsx(CustomTooltip,{})}),/*#__PURE__*/_jsx(Scatter,{name:getCandidateTitle(activeCandidate),data:data,fill:getCandidateColor(activeCandidate)})]})}):/*#__PURE__*/_jsx(\"div\",{className:\"flex h-full items-center justify-center\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Nu s-au putut corela datele. Verific\\u0103 formatul fi\\u0219ierelor CSV.\"})})});};// Graficul de clasament al județelor\nconst renderCountyRankingChart=()=>{const sortedData=getSortedCounties().slice(0,15);// Doar primele 15 județe\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold mr-2\",children:\"Sorteaz\\u0103 dup\\u0103:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"inline-flex space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>setSortBy('turnout'),className:`px-3 py-1 rounded ${sortBy==='turnout'?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:\"Prezen\\u021B\\u0103 la vot\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setSortBy('candidate'),className:`px-3 py-1 rounded ${sortBy==='candidate'?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:[\"Interes pentru \",getCandidateTitle(activeCandidate)]})]})]}),/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"85%\",children:/*#__PURE__*/_jsxs(BarChart,{layout:\"vertical\",data:sortedData,margin:{top:5,right:30,left:60,bottom:5},children:[/*#__PURE__*/_jsx(CartesianGrid,{strokeDasharray:\"3 3\"}),/*#__PURE__*/_jsx(XAxis,{type:\"number\",domain:[0,sortBy==='turnout'?35:70]}),/*#__PURE__*/_jsx(YAxis,{dataKey:\"county\",type:\"category\",width:100,tick:{fontSize:12}}),/*#__PURE__*/_jsx(Tooltip,{}),/*#__PURE__*/_jsx(Bar,{dataKey:sortBy==='turnout'?'turnoutPercentage':activeCandidate,fill:sortBy==='turnout'?'#4299e1':getCandidateColor(activeCandidate),name:sortBy==='turnout'?'Prezență la vot (%)':`Interes pentru ${getCandidateTitle(activeCandidate)} (%)`})]})})]});};// Obține datele pentru graficul de comparație între candidați pentru un județ selectat\nconst getCountyComparisonData=()=>{if(!selectedCounty)return[];const county=data.find(c=>c.countyCode===selectedCounty);if(!county)return[];return[{name:'Nicușor Dan',value:county.nicusorDan,color:getCandidateColor('nicusorDan')},{name:'Crin Antonescu',value:county.crinAntonescu,color:getCandidateColor('crinAntonescu')},{name:'George Simion',value:county.georgeSimion,color:getCandidateColor('georgeSimion')},{name:'Victor Ponta',value:county.victorPonta,color:getCandidateColor('victorPonta')}];};// Grafic pentru compararea candidaților într-un județ\nconst renderCandidateComparisonChart=()=>{const comparisonData=getCountyComparisonData();const COLORS=['#8884d8','#82ca9d','#ffc658','#ff8042'];return/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold mr-2\",children:\"Selecteaz\\u0103 un jude\\u021B:\"}),/*#__PURE__*/_jsxs(\"select\",{value:selectedCounty||'',onChange:e=>setSelectedCounty(e.target.value),className:\"px-3 py-1 rounded border border-gray-300\",children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Selecteaz\\u0103...\"}),data.map(county=>/*#__PURE__*/_jsxs(\"option\",{value:county.countyCode,children:[county.county,\" (\",county.countyCode,\")\"]},county.countyCode))]})]}),selectedCounty?/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"85%\",children:/*#__PURE__*/_jsxs(PieChart,{children:[/*#__PURE__*/_jsx(Pie,{data:comparisonData,cx:\"50%\",cy:\"50%\",labelLine:true,outerRadius:120,fill:\"#8884d8\",dataKey:\"value\",nameKey:\"name\",label:_ref2=>{let{name,value}=_ref2;return`${name}: ${value}%`;},children:comparisonData.map((entry,index)=>/*#__PURE__*/_jsx(Cell,{fill:COLORS[index%COLORS.length]},`cell-${index}`))}),/*#__PURE__*/_jsx(Tooltip,{formatter:value=>`${value}%`}),/*#__PURE__*/_jsx(Legend,{})]})}):/*#__PURE__*/_jsx(\"div\",{className:\"flex h-full items-center justify-center\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Selecteaz\\u0103 un jude\\u021B pentru a vedea compara\\u021Bia \\xEEntre candida\\u021Bi\"})})]});};// Secțiunea cu analiza pentru toate vizualizările\nconst renderAnalysisSection=()=>{if(viewMode==='correlation'){return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 bg-white p-4 rounded border border-gray-300\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-bold mb-2\",children:\"Analiz\\u0103 corela\\u021Bie:\"}),/*#__PURE__*/_jsx(\"p\",{children:correlations.victorPonta>0.2?\"Victor Ponta arată o corelație pozitivă cu prezența la vot, sugerând că zonele cu un interes mai mare de căutare pentru Ponta tind să aibă rate de participare mai ridicate.\":correlations.victorPonta<-0.2?\"Victor Ponta arată o corelație negativă cu prezența la vot, sugerând că zonele cu un interes mai mare de căutare pentru Ponta tind să aibă rate de participare mai scăzute.\":\"Victor Ponta arată o corelație pozitivă slabă (0.30) cu prezența la vot. Zonele cu un interes mai mare pentru Ponta tind să aibă o prezență la vot ușor mai ridicată.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2\",children:correlations.georgeSimion<-0.1?\"George Simion prezintă o corelație ușor negativă (-0.14) cu prezența la vot, sugerând că regiunile cu interes mai mare pentru Simion ar putea avea o participare electorală ceva mai scăzută.\":\"George Simion nu prezintă aproape nicio corelație cu prezența la vot.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2\",children:\"Nicu\\u0219or Dan \\u0219i Crin Antonescu nu prezint\\u0103 practic nicio corela\\u021Bie cu modelele de prezen\\u021B\\u0103 la vot, suger\\xE2nd c\\u0103 popularitatea lor nu este legat\\u0103 de ratele de participare.\"})]});}else if(viewMode==='countyRanking'){return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 bg-white p-4 rounded border border-gray-300\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-bold mb-2\",children:\"Analiz\\u0103 jude\\u021Be:\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Jude\\u021Bele cu cea mai mare prezen\\u021B\\u0103 la vot sunt \\xEEn general cele urbane \\u0219i din proximitatea capitalei. Acestea tind s\\u0103 aib\\u0103 o participare electoral\\u0103 mai activ\\u0103.\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"mt-2\",children:[activeCandidate==='victorPonta'&&\"Victor Ponta are cel mai mare interes de căutare în județele din Moldova și sudul țării, zone cu tradiție pentru partidul său.\",activeCandidate==='nicusorDan'&&\"Nicușor Dan are cel mai mare interes de căutare în zonele urbane și în județe precum Vrancea și Satu Mare, deși este mai cunoscut ca politician bucureștean.\",activeCandidate==='crinAntonescu'&&\"Crin Antonescu are cel mai mare interes de căutare în județe precum Tulcea, Alba și Harghita, indicând diversitatea geografică a sprijinului său.\",activeCandidate==='georgeSimion'&&\"George Simion are cel mai mare interes de căutare în județe din vest precum Caraș-Severin și Arad, dar și în zone din sudul țării.\"]})]});}else if(viewMode==='candidateComparison'){var _data$find,_data$find2;return/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 bg-white p-4 rounded border border-gray-300\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-bold mb-2\",children:\"Analiz\\u0103 comparativ\\u0103:\"}),selectedCounty?/*#__PURE__*/_jsxs(\"p\",{children:[(_data$find=data.find(c=>c.countyCode===selectedCounty))===null||_data$find===void 0?void 0:_data$find.county,\" are o prezen\\u021B\\u0103 la vot de \",formatNumber((_data$find2=data.find(c=>c.countyCode===selectedCounty))===null||_data$find2===void 0?void 0:_data$find2.turnoutPercentage),\"%. Candidatul cu cel mai mare interes de c\\u0103utare \\xEEn acest jude\\u021B este \",(()=>{const county=data.find(c=>c.countyCode===selectedCounty);if(!county)return'';const maxValue=Math.max(county.nicusorDan,county.crinAntonescu,county.georgeSimion,county.victorPonta);if(maxValue===county.nicusorDan)return'Nicușor Dan';if(maxValue===county.crinAntonescu)return'Crin Antonescu';if(maxValue===county.georgeSimion)return'George Simion';if(maxValue===county.victorPonta)return'Victor Ponta';return'';})(),\" cu \",(()=>{const county=data.find(c=>c.countyCode===selectedCounty);if(!county)return'';const maxValue=Math.max(county.nicusorDan,county.crinAntonescu,county.georgeSimion,county.victorPonta);return maxValue;})(),\"% din c\\u0103ut\\u0103ri.\"]}):/*#__PURE__*/_jsx(\"p\",{children:\"Selecteaz\\u0103 un jude\\u021B pentru a vedea o analiz\\u0103 detaliat\\u0103 a interesului pentru candida\\u021Bi.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2\",children:\"La nivel na\\u021Bional, Crin Antonescu \\u0219i Nicu\\u0219or Dan au cele mai multe c\\u0103ut\\u0103ri, \\xEEn timp ce Victor Ponta are cel mai puternic raport \\xEEntre c\\u0103ut\\u0103ri \\u0219i prezen\\u021Ba la vot.\"})]});}return null;};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"flex h-screen items-center justify-center\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Se \\xEEncarc\\u0103 datele...\"})});}if(error){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex h-screen items-center justify-center\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"text-red-500\",children:[\"Eroare: \",error]}),/*#__PURE__*/_jsx(\"p\",{children:\"Verific\\u0103 dac\\u0103 fi\\u0219ierele CSV sunt \\xEEn folderul public \\u0219i numele lor sunt corecte.\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col p-4 space-y-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-2xl font-bold\",children:\"Dashboard Analiz\\u0103 Electoral\\u0103: Prezen\\u021Ba la vot \\u0219i Interesul de c\\u0103utare\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-4 rounded border border-gray-300\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center mb-4\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold mr-4\",children:\"Selecteaz\\u0103 candidatul:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"flex space-x-2\",children:['victorPonta','nicusorDan','crinAntonescu','georgeSimion'].map(candidate=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCandidateChange(candidate),className:`px-3 py-1 rounded ${activeCandidate===candidate?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:getCandidateTitle(candidate)},candidate))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold mr-4\",children:\"Tip vizualizare:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-2\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleViewModeChange('correlation'),className:`px-3 py-1 rounded ${viewMode==='correlation'?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:\"Corela\\u021Bie\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleViewModeChange('countyRanking'),className:`px-3 py-1 rounded ${viewMode==='countyRanking'?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:\"Clasament jude\\u021Be\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleViewModeChange('candidateComparison'),className:`px-3 py-1 rounded ${viewMode==='candidateComparison'?'bg-blue-600 text-white':'bg-gray-200 hover:bg-gray-300'}`,children:\"Compara\\u021Bie candida\\u021Bi\"})]})]}),correlations[activeCandidate]!==undefined&&viewMode==='correlation'&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-3\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-semibold\",children:\"Coeficient de corela\\u021Bie:\"}),' ',/*#__PURE__*/_jsx(\"span\",{className:`${correlations[activeCandidate]>0.2?'text-green-600 font-bold':correlations[activeCandidate]<-0.2?'text-red-600 font-bold':'text-gray-600'}`,children:formatCorrelation(correlations[activeCandidate])}),correlations[activeCandidate]>0.2?' (Corelație pozitivă puternică)':correlations[activeCandidate]<-0.2?' (Corelație negativă puternică)':' (Corelație slabă/inexistentă)']})]}),viewMode==='correlation'&&renderCorrelationChart(),viewMode==='countyRanking'&&renderCountyRankingChart(),viewMode==='candidateComparison'&&renderCandidateComparisonChart(),renderAnalysisSection()]});}","map":{"version":3,"names":["React","useState","useEffect","ScatterChart","Scatter","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Label","BarChart","Bar","PieChart","Pie","Cell","Legend","_","Papa","jsxs","_jsxs","jsx","_jsx","App","data","setData","activeCandidate","setActiveCandidate","correlations","setCorrelations","loading","setLoading","error","setError","viewMode","setViewMode","selectedCounty","setSelectedCounty","sortBy","setSortBy","fetchData","voterResponse","fetch","process","env","PUBLIC_URL","trendsResponse","ok","Error","voterData","text","trendsData","processedData","processData","combinedData","console","message","voterRawData","trendsRawData","parsedVoterData","parse","header","skipEmptyLines","dynamicTyping","lines","split","filter","line","trim","headerLineIndex","i","length","startsWith","headers","map","h","values","val","row","County","replace","candidateNames","j","candidateKey","parseFloat","push","voterDataByCounty","groupBy","voterStats","county","countyData","totalRegistered","sumBy","totalLP","turnoutPercentage","countyMapping","trendsRow","countyName","countyCode","nicusorDan","crinAntonescu","georgeSimion","victorPonta","calculateCorrelation","x","y","n","sumX","reduce","a","b","sumY","sumXY","sumX2","sumY2","numerator","denominator","Math","sqrt","turnoutValues","d","candidates","forEach","candidate","candidateValues","formatCorrelation","value","toFixed","getCandidateTitle","getCandidateColor","handleCandidateChange","handleViewModeChange","mode","formatNumber","num","getSortedCounties","sort","CustomTooltip","_ref","active","payload","className","children","renderCorrelationChart","width","height","margin","top","right","bottom","left","strokeDasharray","type","dataKey","name","domain","position","offset","angle","style","textAnchor","content","fill","renderCountyRankingChart","sortedData","slice","onClick","layout","tick","fontSize","getCountyComparisonData","find","c","color","renderCandidateComparisonChart","comparisonData","COLORS","onChange","e","target","cx","cy","labelLine","outerRadius","nameKey","label","_ref2","entry","index","formatter","renderAnalysisSection","_data$find","_data$find2","maxValue","max","undefined"],"sources":["C:/Users/Aur/Documents/GitHub/prez/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, \n  Tooltip, ResponsiveContainer, Label, BarChart, Bar,\n  PieChart, Pie, Cell, Legend\n} from 'recharts';\nimport _ from 'lodash';\nimport Papa from 'papaparse';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [activeCandidate, setActiveCandidate] = useState('victorPonta');\n  const [correlations, setCorrelations] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [viewMode, setViewMode] = useState('correlation');  // correlation, countyRanking, candidateComparison\n  const [selectedCounty, setSelectedCounty] = useState(null);\n  const [sortBy, setSortBy] = useState('turnout'); // turnout, candidate\n  \n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Încarcă fișierele CSV folosind fetch\n        const voterResponse = await fetch(`${process.env.PUBLIC_URL}/presence_now (1).csv`);\n        const trendsResponse = await fetch(`${process.env.PUBLIC_URL}/geoMap (1).csv`);\n        \n        if (!voterResponse.ok || !trendsResponse.ok) {\n          throw new Error('Eroare la încărcarea fișierelor CSV');\n        }\n        \n        const voterData = await voterResponse.text();\n        const trendsData = await trendsResponse.text();\n        \n        // Procesează datele\n        const processedData = processData(voterData, trendsData);\n        setData(processedData.combinedData);\n        setCorrelations(processedData.correlations);\n        setLoading(false);\n      } catch (error) {\n        console.error('Eroare la procesarea datelor:', error);\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    \n    fetchData();\n  }, []);\n  \n  const processData = (voterRawData, trendsRawData) => {\n    // Parse voter data\n    const parsedVoterData = Papa.parse(voterRawData, {\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true\n    });\n    \n    // Parse Google Trends data manually pentru formatul specific\n    const lines = trendsRawData.split('\\n').filter(line => line.trim());\n    \n    // Găsim linia care conține headerele (de obicei linia 3)\n    let headerLineIndex = -1;\n    for (let i = 0; i < lines.length; i++) {\n      if (lines[i].startsWith('Regiune,')) {\n        headerLineIndex = i;\n        break;\n      }\n    }\n    \n    if (headerLineIndex === -1) {\n      console.error('Nu s-a găsit linia cu headere în fișierul geoMap');\n      return { combinedData: [], correlations: {} };\n    }\n    \n    // Extragem headerele\n    const headers = lines[headerLineIndex].split(',').map(h => h.trim());\n    \n    // Datele încep după linia de headere\n    const trendsData = [];\n    for (let i = headerLineIndex + 1; i < lines.length; i++) {\n      if (!lines[i].trim()) continue;\n      \n      const values = lines[i].split(',').map(val => val.trim());\n      if (values.length >= headers.length) {\n        const row = {\n          County: values[0].replace('Județul ', '').replace('Municipiul ', '')\n        };\n        \n        // Numele candidaților din headere\n        const candidateNames = {\n          'Nicusor dan: (04.04.2025 – 04.05.2025)': 'nicusorDan',\n          'Crin Antonescu: (04.04.2025 – 04.05.2025)': 'crinAntonescu',\n          'George Simion: (04.04.2025 – 04.05.2025)': 'georgeSimion',\n          'Victor Ponta: (04.04.2025 – 04.05.2025)': 'victorPonta'\n        };\n        \n        // Adăugăm datele pentru fiecare candidat\n        for (let j = 1; j < headers.length; j++) {\n          const candidateKey = candidateNames[headers[j]];\n          if (candidateKey && values[j]) {\n            // Convertim valoarea procentuală în număr\n            row[candidateKey] = parseFloat(values[j].replace(' %', ''));\n          }\n        }\n        \n        trendsData.push(row);\n      }\n    }\n    \n    // Group voter data by county\n    const voterDataByCounty = _.groupBy(parsedVoterData.data, 'Judet');\n    \n    // Calculate totals for each county\n    const voterStats = {};\n    for (const county in voterDataByCounty) {\n      if (county) {\n        const countyData = voterDataByCounty[county];\n        \n        // Sum up registered voters and turnout\n        const totalRegistered = _.sumBy(countyData, 'Înscriși pe liste permanente') || 0;\n        const totalLP = _.sumBy(countyData, 'LP') || 0; // Turnout count\n        \n        // Calculate turnout percentage\n        const turnoutPercentage = totalRegistered > 0 ? (totalLP / totalRegistered) * 100 : 0;\n        \n        voterStats[county] = {\n          totalRegistered,\n          totalLP,\n          turnoutPercentage\n        };\n      }\n    }\n    \n    // Map county names\n    const countyMapping = {\n      'Alba': 'AB',\n      'Arad': 'AR',\n      'Argeș': 'AG',\n      'Bacău': 'BC',\n      'Bihor': 'BH',\n      'Bistrița-Năsăud': 'BN',\n      'Botoșani': 'BT',\n      'Brașov': 'BV',\n      'Brăila': 'BR',\n      'Buzău': 'BZ',\n      'Caraș-Severin': 'CS',\n      'Cluj': 'CJ',\n      'Constanța': 'CT',\n      'Covasna': 'CV',\n      'Călărași': 'CL',\n      'Dolj': 'DJ',\n      'Dâmbovița': 'DB',\n      'Galați': 'GL',\n      'Giurgiu': 'GR',\n      'Gorj': 'GJ',\n      'Harghita': 'HR',\n      'Hunedoara': 'HD',\n      'Ialomița': 'IL',\n      'Iași': 'IS',\n      'Ilfov': 'IF',\n      'Maramureș': 'MM',\n      'Mehedinți': 'MH',\n      'Mureș': 'MS',\n      'Neamț': 'NT',\n      'Olt': 'OT',\n      'Prahova': 'PH',\n      'Satu Mare': 'SM',\n      'Sibiu': 'SB',\n      'Suceava': 'SV',\n      'Sălaj': 'SJ',\n      'Teleorman': 'TR',\n      'Timiș': 'TM',\n      'Tulcea': 'TL',\n      'Vaslui': 'VS',\n      'Vrancea': 'VN',\n      'Vâlcea': 'VL',\n      'București': 'B'\n    };\n    \n    // Combine datasets\n    const combinedData = [];\n    for (const trendsRow of trendsData) {\n      const countyName = trendsRow.County;\n      const countyCode = countyMapping[countyName];\n      \n      if (countyCode && voterStats[countyCode]) {\n        combinedData.push({\n          county: countyName,\n          countyCode: countyCode,\n          turnoutPercentage: voterStats[countyCode].turnoutPercentage,\n          nicusorDan: trendsRow.nicusorDan,\n          crinAntonescu: trendsRow.crinAntonescu,\n          georgeSimion: trendsRow.georgeSimion, \n          victorPonta: trendsRow.victorPonta\n        });\n      }\n    }\n    \n    // Calculate correlations\n    const calculateCorrelation = (x, y) => {\n      const n = x.length;\n      if (n === 0 || n !== y.length) return 0;\n      \n      const sumX = x.reduce((a, b) => a + b, 0);\n      const sumY = y.reduce((a, b) => a + b, 0);\n      const sumXY = x.reduce((a, b, i) => a + b * y[i], 0);\n      const sumX2 = x.reduce((a, b) => a + b * b, 0);\n      const sumY2 = y.reduce((a, b) => a + b * b, 0);\n      \n      const numerator = n * sumXY - sumX * sumY;\n      const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\n      \n      return denominator === 0 ? 0 : numerator / denominator;\n    };\n    \n    // Calculate correlation for each candidate\n    const turnoutValues = combinedData.map(d => d.turnoutPercentage);\n    const candidates = ['nicusorDan', 'crinAntonescu', 'georgeSimion', 'victorPonta'];\n    const correlations = {};\n    \n    candidates.forEach(candidate => {\n      const candidateValues = combinedData.map(d => d[candidate]);\n      correlations[candidate] = calculateCorrelation(turnoutValues, candidateValues);\n    });\n    \n    return { combinedData, correlations };\n  };\n\n  // Format correlation for display\n  const formatCorrelation = (value) => {\n    return value.toFixed(3);\n  };\n  \n  // Get title for the candidate\n  const getCandidateTitle = (candidate) => {\n    switch(candidate) {\n      case 'nicusorDan': return 'Nicușor Dan';\n      case 'crinAntonescu': return 'Crin Antonescu';\n      case 'georgeSimion': return 'George Simion';\n      case 'victorPonta': return 'Victor Ponta';\n      default: return candidate;\n    }\n  };\n  \n  // Determine color for a candidate\n  const getCandidateColor = (candidate) => {\n    switch(candidate) {\n      case 'nicusorDan': return '#8884d8';\n      case 'crinAntonescu': return '#82ca9d';\n      case 'georgeSimion': return '#ffc658';\n      case 'victorPonta': return '#ff8042';\n      default: return '#000000';\n    }\n  };\n  \n  const handleCandidateChange = (candidate) => {\n    setActiveCandidate(candidate);\n  };\n\n  const handleViewModeChange = (mode) => {\n    setViewMode(mode);\n  };\n\n  // Round numbers for more readable display\n  const formatNumber = (num) => {\n    return num.toFixed(2);\n  };\n  \n  // Sortează județele în funcție de criteriul selectat\n  const getSortedCounties = () => {\n    if (sortBy === 'turnout') {\n      return [...data].sort((a, b) => b.turnoutPercentage - a.turnoutPercentage);\n    } else {\n      return [...data].sort((a, b) => b[activeCandidate] - a[activeCandidate]);\n    }\n  };\n  \n  // Tooltip personalizat pentru graficul de corelație\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-4 border border-gray-300 rounded shadow-lg\">\n          <p className=\"font-bold text-lg\">{data.county} ({data.countyCode})</p>\n          <p>Prezență la vot: {formatNumber(data.turnoutPercentage)}%</p>\n          <p>{getCandidateTitle(activeCandidate)}: {data[activeCandidate]}%</p>\n        </div>\n      );\n    }\n    return null;\n  };\n  \n  // Grafic de corelație între prezența la vot și interesul de căutare\n  const renderCorrelationChart = () => {\n    return (\n      <div className=\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\">\n        {data.length > 0 ? (\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ScatterChart\n              margin={{ top: 20, right: 30, bottom: 30, left: 60 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                type=\"number\" \n                dataKey=\"turnoutPercentage\" \n                name=\"Prezență la vot\" \n                domain={[15, 35]}\n              >\n                <Label value=\"Prezență la vot (%)\" position=\"bottom\" offset={0} />\n              </XAxis>\n              <YAxis \n                type=\"number\" \n                dataKey={activeCandidate} \n                name={getCandidateTitle(activeCandidate)}\n                domain={[0, 70]}\n              >\n                <Label \n                  value={`Interes de căutare pentru ${getCandidateTitle(activeCandidate)} (%)`} \n                  angle={-90} \n                  position=\"left\" \n                  style={{ textAnchor: 'middle' }} \n                />\n              </YAxis>\n              <Tooltip content={<CustomTooltip />} />\n              <Scatter \n                name={getCandidateTitle(activeCandidate)} \n                data={data} \n                fill={getCandidateColor(activeCandidate)}\n              />\n            </ScatterChart>\n          </ResponsiveContainer>\n        ) : (\n          <div className=\"flex h-full items-center justify-center\">\n            <p>Nu s-au putut corela datele. Verifică formatul fișierelor CSV.</p>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Graficul de clasament al județelor\n  const renderCountyRankingChart = () => {\n    const sortedData = getSortedCounties().slice(0, 15); // Doar primele 15 județe\n    \n    return (\n      <div className=\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\">\n        <div className=\"mb-3\">\n          <span className=\"font-semibold mr-2\">Sortează după:</span>\n          <div className=\"inline-flex space-x-2\">\n            <button\n              onClick={() => setSortBy('turnout')}\n              className={`px-3 py-1 rounded ${\n                sortBy === 'turnout' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 hover:bg-gray-300'\n              }`}\n            >\n              Prezență la vot\n            </button>\n            <button\n              onClick={() => setSortBy('candidate')}\n              className={`px-3 py-1 rounded ${\n                sortBy === 'candidate' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 hover:bg-gray-300'\n              }`}\n            >\n              Interes pentru {getCandidateTitle(activeCandidate)}\n            </button>\n          </div>\n        </div>\n        \n        <ResponsiveContainer width=\"100%\" height=\"85%\">\n          <BarChart\n            layout=\"vertical\"\n            data={sortedData}\n            margin={{ top: 5, right: 30, left: 60, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis type=\"number\" domain={[0, sortBy === 'turnout' ? 35 : 70]} />\n            <YAxis \n              dataKey=\"county\" \n              type=\"category\" \n              width={100} \n              tick={{ fontSize: 12 }} \n            />\n            <Tooltip />\n            <Bar \n              dataKey={sortBy === 'turnout' ? 'turnoutPercentage' : activeCandidate} \n              fill={sortBy === 'turnout' ? '#4299e1' : getCandidateColor(activeCandidate)} \n              name={sortBy === 'turnout' ? 'Prezență la vot (%)' : `Interes pentru ${getCandidateTitle(activeCandidate)} (%)`}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  };\n  \n  // Obține datele pentru graficul de comparație între candidați pentru un județ selectat\n  const getCountyComparisonData = () => {\n    if (!selectedCounty) return [];\n    \n    const county = data.find(c => c.countyCode === selectedCounty);\n    if (!county) return [];\n    \n    return [\n      { name: 'Nicușor Dan', value: county.nicusorDan, color: getCandidateColor('nicusorDan') },\n      { name: 'Crin Antonescu', value: county.crinAntonescu, color: getCandidateColor('crinAntonescu') },\n      { name: 'George Simion', value: county.georgeSimion, color: getCandidateColor('georgeSimion') },\n      { name: 'Victor Ponta', value: county.victorPonta, color: getCandidateColor('victorPonta') }\n    ];\n  };\n  \n  // Grafic pentru compararea candidaților într-un județ\n  const renderCandidateComparisonChart = () => {\n    const comparisonData = getCountyComparisonData();\n    const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff8042'];\n    \n    return (\n      <div className=\"flex-grow bg-white p-4 rounded border border-gray-300 h-96\">\n        <div className=\"mb-3\">\n          <span className=\"font-semibold mr-2\">Selectează un județ:</span>\n          <select \n            value={selectedCounty || ''} \n            onChange={(e) => setSelectedCounty(e.target.value)}\n            className=\"px-3 py-1 rounded border border-gray-300\"\n          >\n            <option value=\"\">Selectează...</option>\n            {data.map(county => (\n              <option key={county.countyCode} value={county.countyCode}>\n                {county.county} ({county.countyCode})\n              </option>\n            ))}\n          </select>\n        </div>\n        \n        {selectedCounty ? (\n          <ResponsiveContainer width=\"100%\" height=\"85%\">\n            <PieChart>\n              <Pie\n                data={comparisonData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={true}\n                outerRadius={120}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                nameKey=\"name\"\n                label={({name, value}) => `${name}: ${value}%`}\n              >\n                {comparisonData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip formatter={(value) => `${value}%`} />\n              <Legend />\n            </PieChart>\n          </ResponsiveContainer>\n        ) : (\n          <div className=\"flex h-full items-center justify-center\">\n            <p>Selectează un județ pentru a vedea comparația între candidați</p>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Secțiunea cu analiza pentru toate vizualizările\n  const renderAnalysisSection = () => {\n    if (viewMode === 'correlation') {\n      return (\n        <div className=\"mt-4 bg-white p-4 rounded border border-gray-300\">\n          <h3 className=\"font-bold mb-2\">Analiză corelație:</h3>\n          <p>\n            {correlations.victorPonta > 0.2 ? \n              \"Victor Ponta arată o corelație pozitivă cu prezența la vot, sugerând că zonele cu un interes mai mare de căutare pentru Ponta tind să aibă rate de participare mai ridicate.\" :\n             correlations.victorPonta < -0.2 ? \n              \"Victor Ponta arată o corelație negativă cu prezența la vot, sugerând că zonele cu un interes mai mare de căutare pentru Ponta tind să aibă rate de participare mai scăzute.\" :\n              \"Victor Ponta arată o corelație pozitivă slabă (0.30) cu prezența la vot. Zonele cu un interes mai mare pentru Ponta tind să aibă o prezență la vot ușor mai ridicată.\"\n            }\n          </p>\n          <p className=\"mt-2\">\n            {correlations.georgeSimion < -0.1 ? \n              \"George Simion prezintă o corelație ușor negativă (-0.14) cu prezența la vot, sugerând că regiunile cu interes mai mare pentru Simion ar putea avea o participare electorală ceva mai scăzută.\" :\n              \"George Simion nu prezintă aproape nicio corelație cu prezența la vot.\"\n            }\n          </p>\n          <p className=\"mt-2\">\n            Nicușor Dan și Crin Antonescu nu prezintă practic nicio corelație cu modelele de prezență la vot, sugerând că popularitatea lor nu este legată de ratele de participare.\n          </p>\n        </div>\n      );\n    } else if (viewMode === 'countyRanking') {\n      return (\n        <div className=\"mt-4 bg-white p-4 rounded border border-gray-300\">\n          <h3 className=\"font-bold mb-2\">Analiză județe:</h3>\n          <p>\n            Județele cu cea mai mare prezență la vot sunt în general cele urbane și din proximitatea capitalei.\n            Acestea tind să aibă o participare electorală mai activă.\n          </p>\n          <p className=\"mt-2\">\n            {activeCandidate === 'victorPonta' && \n              \"Victor Ponta are cel mai mare interes de căutare în județele din Moldova și sudul țării, zone cu tradiție pentru partidul său.\"}\n            {activeCandidate === 'nicusorDan' && \n              \"Nicușor Dan are cel mai mare interes de căutare în zonele urbane și în județe precum Vrancea și Satu Mare, deși este mai cunoscut ca politician bucureștean.\"}\n            {activeCandidate === 'crinAntonescu' && \n              \"Crin Antonescu are cel mai mare interes de căutare în județe precum Tulcea, Alba și Harghita, indicând diversitatea geografică a sprijinului său.\"}\n            {activeCandidate === 'georgeSimion' && \n              \"George Simion are cel mai mare interes de căutare în județe din vest precum Caraș-Severin și Arad, dar și în zone din sudul țării.\"}\n          </p>\n        </div>\n      );\n    } else if (viewMode === 'candidateComparison') {\n      return (\n        <div className=\"mt-4 bg-white p-4 rounded border border-gray-300\">\n          <h3 className=\"font-bold mb-2\">Analiză comparativă:</h3>\n          {selectedCounty ? (\n            <p>\n              {data.find(c => c.countyCode === selectedCounty)?.county} are o prezență la vot de {formatNumber(data.find(c => c.countyCode === selectedCounty)?.turnoutPercentage)}%. \n              Candidatul cu cel mai mare interes de căutare în acest județ este {\n                (() => {\n                  const county = data.find(c => c.countyCode === selectedCounty);\n                  if (!county) return '';\n                  \n                  const maxValue = Math.max(\n                    county.nicusorDan, \n                    county.crinAntonescu, \n                    county.georgeSimion, \n                    county.victorPonta\n                  );\n                  \n                  if (maxValue === county.nicusorDan) return 'Nicușor Dan';\n                  if (maxValue === county.crinAntonescu) return 'Crin Antonescu';\n                  if (maxValue === county.georgeSimion) return 'George Simion';\n                  if (maxValue === county.victorPonta) return 'Victor Ponta';\n                  return '';\n                })()\n              } cu {\n                (() => {\n                  const county = data.find(c => c.countyCode === selectedCounty);\n                  if (!county) return '';\n                  \n                  const maxValue = Math.max(\n                    county.nicusorDan, \n                    county.crinAntonescu, \n                    county.georgeSimion, \n                    county.victorPonta\n                  );\n                  \n                  return maxValue;\n                })()\n              }% din căutări.\n            </p>\n          ) : (\n            <p>Selectează un județ pentru a vedea o analiză detaliată a interesului pentru candidați.</p>\n          )}\n          <p className=\"mt-2\">\n            La nivel național, Crin Antonescu și Nicușor Dan au cele mai multe căutări, în timp ce Victor Ponta are cel mai puternic raport între căutări și prezența la vot.\n          </p>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n  \n  if (loading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <p>Se încarcă datele...</p>\n      </div>\n    );\n  }\n  \n  if (error) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <p className=\"text-red-500\">Eroare: {error}</p>\n        <p>Verifică dacă fișierele CSV sunt în folderul public și numele lor sunt corecte.</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"flex flex-col p-4 space-y-4\">\n      <h1 className=\"text-2xl font-bold\">Dashboard Analiză Electorală: Prezența la vot și Interesul de căutare</h1>\n      \n      <div className=\"bg-white p-4 rounded border border-gray-300\">\n        <div className=\"flex items-center mb-4\">\n          <span className=\"font-semibold mr-4\">Selectează candidatul:</span>\n          <div className=\"flex space-x-2\">\n            {['victorPonta', 'nicusorDan', 'crinAntonescu', 'georgeSimion'].map((candidate) => (\n              <button\n                key={candidate}\n                onClick={() => handleCandidateChange(candidate)}\n                className={`px-3 py-1 rounded ${\n                  activeCandidate === candidate \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-gray-200 hover:bg-gray-300'\n                }`}\n              >\n                {getCandidateTitle(candidate)}\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <span className=\"font-semibold mr-4\">Tip vizualizare:</span>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => handleViewModeChange('correlation')}\n              className={`px-3 py-1 rounded ${\n                viewMode === 'correlation' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 hover:bg-gray-300'\n              }`}\n            >\n              Corelație\n            </button>\n            <button\n              onClick={() => handleViewModeChange('countyRanking')}\n              className={`px-3 py-1 rounded ${\n                viewMode === 'countyRanking' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 hover:bg-gray-300'\n              }`}\n            >\n              Clasament județe\n            </button>\n            <button\n              onClick={() => handleViewModeChange('candidateComparison')}\n              className={`px-3 py-1 rounded ${\n                viewMode === 'candidateComparison' \n                  ? 'bg-blue-600 text-white' \n                  : 'bg-gray-200 hover:bg-gray-300'\n              }`}\n            >\n              Comparație candidați\n            </button>\n          </div>\n        </div>\n        \n        {correlations[activeCandidate] !== undefined && viewMode === 'correlation' && (\n          <div className=\"mt-3\">\n            <span className=\"font-semibold\">Coeficient de corelație:</span>{' '}\n            <span className={`${\n              correlations[activeCandidate] > 0.2 ? 'text-green-600 font-bold' : \n              correlations[activeCandidate] < -0.2 ? 'text-red-600 font-bold' : \n              'text-gray-600'\n            }`}>\n              {formatCorrelation(correlations[activeCandidate])}\n            </span>\n            {correlations[activeCandidate] > 0.2 ? \n              ' (Corelație pozitivă puternică)' : \n              correlations[activeCandidate] < -0.2 ? \n              ' (Corelație negativă puternică)' : \n              ' (Corelație slabă/inexistentă)'}\n          </div>\n        )}\n      </div>\n      \n      {viewMode === 'correlation' && renderCorrelationChart()}\n      {viewMode === 'countyRanking' && renderCountyRankingChart()}\n      {viewMode === 'candidateComparison' && renderCandidateComparisonChart()}\n      \n      {renderAnalysisSection()}\n    </div>\n  );\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OACEC,YAAY,CAAEC,OAAO,CAAEC,KAAK,CAAEC,KAAK,CAAEC,aAAa,CAClDC,OAAO,CAAEC,mBAAmB,CAAEC,KAAK,CAAEC,QAAQ,CAAEC,GAAG,CAClDC,QAAQ,CAAEC,GAAG,CAAEC,IAAI,CAAEC,MAAM,KACtB,UAAU,CACjB,MAAO,CAAAC,CAAC,KAAM,QAAQ,CACtB,MAAO,CAAAC,IAAI,KAAM,WAAW,CAC5B,MAAO,WAAW,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,yBAEnB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGxB,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACyB,eAAe,CAAEC,kBAAkB,CAAC,CAAG1B,QAAQ,CAAC,aAAa,CAAC,CACrE,KAAM,CAAC2B,YAAY,CAAEC,eAAe,CAAC,CAAG5B,QAAQ,CAAC,CAAC,CAAC,CAAC,CACpD,KAAM,CAAC6B,OAAO,CAAEC,UAAU,CAAC,CAAG9B,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAAC+B,KAAK,CAAEC,QAAQ,CAAC,CAAGhC,QAAQ,CAAC,IAAI,CAAC,CACxC,KAAM,CAACiC,QAAQ,CAAEC,WAAW,CAAC,CAAGlC,QAAQ,CAAC,aAAa,CAAC,CAAG;AAC1D,KAAM,CAACmC,cAAc,CAAEC,iBAAiB,CAAC,CAAGpC,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACqC,MAAM,CAAEC,SAAS,CAAC,CAAGtC,QAAQ,CAAC,SAAS,CAAC,CAAE;AAEjDC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAsC,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACF;AACA,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,uBAAuB,CAAC,CACnF,KAAM,CAAAC,cAAc,CAAG,KAAM,CAAAJ,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,iBAAiB,CAAC,CAE9E,GAAI,CAACJ,aAAa,CAACM,EAAE,EAAI,CAACD,cAAc,CAACC,EAAE,CAAE,CAC3C,KAAM,IAAI,CAAAC,KAAK,CAAC,qCAAqC,CAAC,CACxD,CAEA,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAR,aAAa,CAACS,IAAI,CAAC,CAAC,CAC5C,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAL,cAAc,CAACI,IAAI,CAAC,CAAC,CAE9C;AACA,KAAM,CAAAE,aAAa,CAAGC,WAAW,CAACJ,SAAS,CAAEE,UAAU,CAAC,CACxD1B,OAAO,CAAC2B,aAAa,CAACE,YAAY,CAAC,CACnCzB,eAAe,CAACuB,aAAa,CAACxB,YAAY,CAAC,CAC3CG,UAAU,CAAC,KAAK,CAAC,CACnB,CAAE,MAAOC,KAAK,CAAE,CACduB,OAAO,CAACvB,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrDC,QAAQ,CAACD,KAAK,CAACwB,OAAO,CAAC,CACvBzB,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDS,SAAS,CAAC,CAAC,CACb,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAa,WAAW,CAAGA,CAACI,YAAY,CAAEC,aAAa,GAAK,CACnD;AACA,KAAM,CAAAC,eAAe,CAAGzC,IAAI,CAAC0C,KAAK,CAACH,YAAY,CAAE,CAC/CI,MAAM,CAAE,IAAI,CACZC,cAAc,CAAE,IAAI,CACpBC,aAAa,CAAE,IACjB,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,KAAK,CAAGN,aAAa,CAACO,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAEnE;AACA,GAAI,CAAAC,eAAe,CAAG,CAAC,CAAC,CACxB,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,KAAK,CAACO,MAAM,CAAED,CAAC,EAAE,CAAE,CACrC,GAAIN,KAAK,CAACM,CAAC,CAAC,CAACE,UAAU,CAAC,UAAU,CAAC,CAAE,CACnCH,eAAe,CAAGC,CAAC,CACnB,MACF,CACF,CAEA,GAAID,eAAe,GAAK,CAAC,CAAC,CAAE,CAC1Bd,OAAO,CAACvB,KAAK,CAAC,kDAAkD,CAAC,CACjE,MAAO,CAAEsB,YAAY,CAAE,EAAE,CAAE1B,YAAY,CAAE,CAAC,CAAE,CAAC,CAC/C,CAEA;AACA,KAAM,CAAA6C,OAAO,CAAGT,KAAK,CAACK,eAAe,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC,CAACS,GAAG,CAACC,CAAC,EAAIA,CAAC,CAACP,IAAI,CAAC,CAAC,CAAC,CAEpE;AACA,KAAM,CAAAjB,UAAU,CAAG,EAAE,CACrB,IAAK,GAAI,CAAAmB,CAAC,CAAGD,eAAe,CAAG,CAAC,CAAEC,CAAC,CAAGN,KAAK,CAACO,MAAM,CAAED,CAAC,EAAE,CAAE,CACvD,GAAI,CAACN,KAAK,CAACM,CAAC,CAAC,CAACF,IAAI,CAAC,CAAC,CAAE,SAEtB,KAAM,CAAAQ,MAAM,CAAGZ,KAAK,CAACM,CAAC,CAAC,CAACL,KAAK,CAAC,GAAG,CAAC,CAACS,GAAG,CAACG,GAAG,EAAIA,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC,CACzD,GAAIQ,MAAM,CAACL,MAAM,EAAIE,OAAO,CAACF,MAAM,CAAE,CACnC,KAAM,CAAAO,GAAG,CAAG,CACVC,MAAM,CAAEH,MAAM,CAAC,CAAC,CAAC,CAACI,OAAO,CAAC,UAAU,CAAE,EAAE,CAAC,CAACA,OAAO,CAAC,aAAa,CAAE,EAAE,CACrE,CAAC,CAED;AACA,KAAM,CAAAC,cAAc,CAAG,CACrB,wCAAwC,CAAE,YAAY,CACtD,2CAA2C,CAAE,eAAe,CAC5D,0CAA0C,CAAE,cAAc,CAC1D,yCAAyC,CAAE,aAC7C,CAAC,CAED;AACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGT,OAAO,CAACF,MAAM,CAAEW,CAAC,EAAE,CAAE,CACvC,KAAM,CAAAC,YAAY,CAAGF,cAAc,CAACR,OAAO,CAACS,CAAC,CAAC,CAAC,CAC/C,GAAIC,YAAY,EAAIP,MAAM,CAACM,CAAC,CAAC,CAAE,CAC7B;AACAJ,GAAG,CAACK,YAAY,CAAC,CAAGC,UAAU,CAACR,MAAM,CAACM,CAAC,CAAC,CAACF,OAAO,CAAC,IAAI,CAAE,EAAE,CAAC,CAAC,CAC7D,CACF,CAEA7B,UAAU,CAACkC,IAAI,CAACP,GAAG,CAAC,CACtB,CACF,CAEA;AACA,KAAM,CAAAQ,iBAAiB,CAAGrE,CAAC,CAACsE,OAAO,CAAC5B,eAAe,CAACnC,IAAI,CAAE,OAAO,CAAC,CAElE;AACA,KAAM,CAAAgE,UAAU,CAAG,CAAC,CAAC,CACrB,IAAK,KAAM,CAAAC,MAAM,GAAI,CAAAH,iBAAiB,CAAE,CACtC,GAAIG,MAAM,CAAE,CACV,KAAM,CAAAC,UAAU,CAAGJ,iBAAiB,CAACG,MAAM,CAAC,CAE5C;AACA,KAAM,CAAAE,eAAe,CAAG1E,CAAC,CAAC2E,KAAK,CAACF,UAAU,CAAE,8BAA8B,CAAC,EAAI,CAAC,CAChF,KAAM,CAAAG,OAAO,CAAG5E,CAAC,CAAC2E,KAAK,CAACF,UAAU,CAAE,IAAI,CAAC,EAAI,CAAC,CAAE;AAEhD;AACA,KAAM,CAAAI,iBAAiB,CAAGH,eAAe,CAAG,CAAC,CAAIE,OAAO,CAAGF,eAAe,CAAI,GAAG,CAAG,CAAC,CAErFH,UAAU,CAACC,MAAM,CAAC,CAAG,CACnBE,eAAe,CACfE,OAAO,CACPC,iBACF,CAAC,CACH,CACF,CAEA;AACA,KAAM,CAAAC,aAAa,CAAG,CACpB,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,iBAAiB,CAAE,IAAI,CACvB,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,IAAI,CACd,QAAQ,CAAE,IAAI,CACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,IAAI,CACjB,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CACb,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,IAAI,CACd,QAAQ,CAAE,IAAI,CACd,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,IAAI,CACd,WAAW,CAAE,GACf,CAAC,CAED;AACA,KAAM,CAAAzC,YAAY,CAAG,EAAE,CACvB,IAAK,KAAM,CAAA0C,SAAS,GAAI,CAAA7C,UAAU,CAAE,CAClC,KAAM,CAAA8C,UAAU,CAAGD,SAAS,CAACjB,MAAM,CACnC,KAAM,CAAAmB,UAAU,CAAGH,aAAa,CAACE,UAAU,CAAC,CAE5C,GAAIC,UAAU,EAAIV,UAAU,CAACU,UAAU,CAAC,CAAE,CACxC5C,YAAY,CAAC+B,IAAI,CAAC,CAChBI,MAAM,CAAEQ,UAAU,CAClBC,UAAU,CAAEA,UAAU,CACtBJ,iBAAiB,CAAEN,UAAU,CAACU,UAAU,CAAC,CAACJ,iBAAiB,CAC3DK,UAAU,CAAEH,SAAS,CAACG,UAAU,CAChCC,aAAa,CAAEJ,SAAS,CAACI,aAAa,CACtCC,YAAY,CAAEL,SAAS,CAACK,YAAY,CACpCC,WAAW,CAAEN,SAAS,CAACM,WACzB,CAAC,CAAC,CACJ,CACF,CAEA;AACA,KAAM,CAAAC,oBAAoB,CAAGA,CAACC,CAAC,CAAEC,CAAC,GAAK,CACrC,KAAM,CAAAC,CAAC,CAAGF,CAAC,CAACjC,MAAM,CAClB,GAAImC,CAAC,GAAK,CAAC,EAAIA,CAAC,GAAKD,CAAC,CAAClC,MAAM,CAAE,MAAO,EAAC,CAEvC,KAAM,CAAAoC,IAAI,CAAGH,CAAC,CAACI,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CACzC,KAAM,CAAAC,IAAI,CAAGN,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAE,CAAC,CAAC,CACzC,KAAM,CAAAE,KAAK,CAAGR,CAAC,CAACI,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,CAAExC,CAAC,GAAKuC,CAAC,CAAGC,CAAC,CAAGL,CAAC,CAACnC,CAAC,CAAC,CAAE,CAAC,CAAC,CACpD,KAAM,CAAA2C,KAAK,CAAGT,CAAC,CAACI,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAGA,CAAC,CAAE,CAAC,CAAC,CAC9C,KAAM,CAAAI,KAAK,CAAGT,CAAC,CAACG,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKD,CAAC,CAAGC,CAAC,CAAGA,CAAC,CAAE,CAAC,CAAC,CAE9C,KAAM,CAAAK,SAAS,CAAGT,CAAC,CAAGM,KAAK,CAAGL,IAAI,CAAGI,IAAI,CACzC,KAAM,CAAAK,WAAW,CAAGC,IAAI,CAACC,IAAI,CAAC,CAACZ,CAAC,CAAGO,KAAK,CAAGN,IAAI,CAAGA,IAAI,GAAKD,CAAC,CAAGQ,KAAK,CAAGH,IAAI,CAAGA,IAAI,CAAC,CAAC,CAEpF,MAAO,CAAAK,WAAW,GAAK,CAAC,CAAG,CAAC,CAAGD,SAAS,CAAGC,WAAW,CACxD,CAAC,CAED;AACA,KAAM,CAAAG,aAAa,CAAGjE,YAAY,CAACoB,GAAG,CAAC8C,CAAC,EAAIA,CAAC,CAAC1B,iBAAiB,CAAC,CAChE,KAAM,CAAA2B,UAAU,CAAG,CAAC,YAAY,CAAE,eAAe,CAAE,cAAc,CAAE,aAAa,CAAC,CACjF,KAAM,CAAA7F,YAAY,CAAG,CAAC,CAAC,CAEvB6F,UAAU,CAACC,OAAO,CAACC,SAAS,EAAI,CAC9B,KAAM,CAAAC,eAAe,CAAGtE,YAAY,CAACoB,GAAG,CAAC8C,CAAC,EAAIA,CAAC,CAACG,SAAS,CAAC,CAAC,CAC3D/F,YAAY,CAAC+F,SAAS,CAAC,CAAGpB,oBAAoB,CAACgB,aAAa,CAAEK,eAAe,CAAC,CAChF,CAAC,CAAC,CAEF,MAAO,CAAEtE,YAAY,CAAE1B,YAAa,CAAC,CACvC,CAAC,CAED;AACA,KAAM,CAAAiG,iBAAiB,CAAIC,KAAK,EAAK,CACnC,MAAO,CAAAA,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CACzB,CAAC,CAED;AACA,KAAM,CAAAC,iBAAiB,CAAIL,SAAS,EAAK,CACvC,OAAOA,SAAS,EACd,IAAK,YAAY,CAAE,MAAO,aAAa,CACvC,IAAK,eAAe,CAAE,MAAO,gBAAgB,CAC7C,IAAK,cAAc,CAAE,MAAO,eAAe,CAC3C,IAAK,aAAa,CAAE,MAAO,cAAc,CACzC,QAAS,MAAO,CAAAA,SAAS,CAC3B,CACF,CAAC,CAED;AACA,KAAM,CAAAM,iBAAiB,CAAIN,SAAS,EAAK,CACvC,OAAOA,SAAS,EACd,IAAK,YAAY,CAAE,MAAO,SAAS,CACnC,IAAK,eAAe,CAAE,MAAO,SAAS,CACtC,IAAK,cAAc,CAAE,MAAO,SAAS,CACrC,IAAK,aAAa,CAAE,MAAO,SAAS,CACpC,QAAS,MAAO,SAAS,CAC3B,CACF,CAAC,CAED,KAAM,CAAAO,qBAAqB,CAAIP,SAAS,EAAK,CAC3ChG,kBAAkB,CAACgG,SAAS,CAAC,CAC/B,CAAC,CAED,KAAM,CAAAQ,oBAAoB,CAAIC,IAAI,EAAK,CACrCjG,WAAW,CAACiG,IAAI,CAAC,CACnB,CAAC,CAED;AACA,KAAM,CAAAC,YAAY,CAAIC,GAAG,EAAK,CAC5B,MAAO,CAAAA,GAAG,CAACP,OAAO,CAAC,CAAC,CAAC,CACvB,CAAC,CAED;AACA,KAAM,CAAAQ,iBAAiB,CAAGA,CAAA,GAAM,CAC9B,GAAIjG,MAAM,GAAK,SAAS,CAAE,CACxB,MAAO,CAAC,GAAGd,IAAI,CAAC,CAACgH,IAAI,CAAC,CAAC3B,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAChB,iBAAiB,CAAGe,CAAC,CAACf,iBAAiB,CAAC,CAC5E,CAAC,IAAM,CACL,MAAO,CAAC,GAAGtE,IAAI,CAAC,CAACgH,IAAI,CAAC,CAAC3B,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACpF,eAAe,CAAC,CAAGmF,CAAC,CAACnF,eAAe,CAAC,CAAC,CAC1E,CACF,CAAC,CAED;AACA,KAAM,CAAA+G,aAAa,CAAGC,IAAA,EAAyB,IAAxB,CAAEC,MAAM,CAAEC,OAAQ,CAAC,CAAAF,IAAA,CACxC,GAAIC,MAAM,EAAIC,OAAO,EAAIA,OAAO,CAACrE,MAAM,CAAE,CACvC,KAAM,CAAA/C,IAAI,CAAGoH,OAAO,CAAC,CAAC,CAAC,CAACA,OAAO,CAC/B,mBACExH,KAAA,QAAKyH,SAAS,CAAC,uDAAuD,CAAAC,QAAA,eACpE1H,KAAA,MAAGyH,SAAS,CAAC,mBAAmB,CAAAC,QAAA,EAAEtH,IAAI,CAACiE,MAAM,CAAC,IAAE,CAACjE,IAAI,CAAC0E,UAAU,CAAC,GAAC,EAAG,CAAC,cACtE9E,KAAA,MAAA0H,QAAA,EAAG,6BAAiB,CAACT,YAAY,CAAC7G,IAAI,CAACsE,iBAAiB,CAAC,CAAC,GAAC,EAAG,CAAC,cAC/D1E,KAAA,MAAA0H,QAAA,EAAId,iBAAiB,CAACtG,eAAe,CAAC,CAAC,IAAE,CAACF,IAAI,CAACE,eAAe,CAAC,CAAC,GAAC,EAAG,CAAC,EAClE,CAAC,CAEV,CACA,MAAO,KAAI,CACb,CAAC,CAED;AACA,KAAM,CAAAqH,sBAAsB,CAAGA,CAAA,GAAM,CACnC,mBACEzH,IAAA,QAAKuH,SAAS,CAAC,4DAA4D,CAAAC,QAAA,CACxEtH,IAAI,CAAC+C,MAAM,CAAG,CAAC,cACdjD,IAAA,CAACb,mBAAmB,EAACuI,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,MAAM,CAAAH,QAAA,cAC7C1H,KAAA,CAACjB,YAAY,EACX+I,MAAM,CAAE,CAAEC,GAAG,CAAE,EAAE,CAAEC,KAAK,CAAE,EAAE,CAAEC,MAAM,CAAE,EAAE,CAAEC,IAAI,CAAE,EAAG,CAAE,CAAAR,QAAA,eAErDxH,IAAA,CAACf,aAAa,EAACgJ,eAAe,CAAC,KAAK,CAAE,CAAC,cACvCjI,IAAA,CAACjB,KAAK,EACJmJ,IAAI,CAAC,QAAQ,CACbC,OAAO,CAAC,mBAAmB,CAC3BC,IAAI,CAAC,2BAAiB,CACtBC,MAAM,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,CAAAb,QAAA,cAEjBxH,IAAA,CAACZ,KAAK,EAACoH,KAAK,CAAC,+BAAqB,CAAC8B,QAAQ,CAAC,QAAQ,CAACC,MAAM,CAAE,CAAE,CAAE,CAAC,CAC7D,CAAC,cACRvI,IAAA,CAAChB,KAAK,EACJkJ,IAAI,CAAC,QAAQ,CACbC,OAAO,CAAE/H,eAAgB,CACzBgI,IAAI,CAAE1B,iBAAiB,CAACtG,eAAe,CAAE,CACzCiI,MAAM,CAAE,CAAC,CAAC,CAAE,EAAE,CAAE,CAAAb,QAAA,cAEhBxH,IAAA,CAACZ,KAAK,EACJoH,KAAK,CAAE,6BAA6BE,iBAAiB,CAACtG,eAAe,CAAC,MAAO,CAC7EoI,KAAK,CAAE,CAAC,EAAG,CACXF,QAAQ,CAAC,MAAM,CACfG,KAAK,CAAE,CAAEC,UAAU,CAAE,QAAS,CAAE,CACjC,CAAC,CACG,CAAC,cACR1I,IAAA,CAACd,OAAO,EAACyJ,OAAO,cAAE3I,IAAA,CAACmH,aAAa,GAAE,CAAE,CAAE,CAAC,cACvCnH,IAAA,CAAClB,OAAO,EACNsJ,IAAI,CAAE1B,iBAAiB,CAACtG,eAAe,CAAE,CACzCF,IAAI,CAAEA,IAAK,CACX0I,IAAI,CAAEjC,iBAAiB,CAACvG,eAAe,CAAE,CAC1C,CAAC,EACU,CAAC,CACI,CAAC,cAEtBJ,IAAA,QAAKuH,SAAS,CAAC,yCAAyC,CAAAC,QAAA,cACtDxH,IAAA,MAAAwH,QAAA,CAAG,0EAA8D,CAAG,CAAC,CAClE,CACN,CACE,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAAqB,wBAAwB,CAAGA,CAAA,GAAM,CACrC,KAAM,CAAAC,UAAU,CAAG7B,iBAAiB,CAAC,CAAC,CAAC8B,KAAK,CAAC,CAAC,CAAE,EAAE,CAAC,CAAE;AAErD,mBACEjJ,KAAA,QAAKyH,SAAS,CAAC,4DAA4D,CAAAC,QAAA,eACzE1H,KAAA,QAAKyH,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBxH,IAAA,SAAMuH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,0BAAc,CAAM,CAAC,cAC1D1H,KAAA,QAAKyH,SAAS,CAAC,uBAAuB,CAAAC,QAAA,eACpCxH,IAAA,WACEgJ,OAAO,CAAEA,CAAA,GAAM/H,SAAS,CAAC,SAAS,CAAE,CACpCsG,SAAS,CAAE,qBACTvG,MAAM,GAAK,SAAS,CAChB,wBAAwB,CACxB,+BAA+B,EAClC,CAAAwG,QAAA,CACJ,2BAED,CAAQ,CAAC,cACT1H,KAAA,WACEkJ,OAAO,CAAEA,CAAA,GAAM/H,SAAS,CAAC,WAAW,CAAE,CACtCsG,SAAS,CAAE,qBACTvG,MAAM,GAAK,WAAW,CAClB,wBAAwB,CACxB,+BAA+B,EAClC,CAAAwG,QAAA,EACJ,iBACgB,CAACd,iBAAiB,CAACtG,eAAe,CAAC,EAC5C,CAAC,EACN,CAAC,EACH,CAAC,cAENJ,IAAA,CAACb,mBAAmB,EAACuI,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,KAAK,CAAAH,QAAA,cAC5C1H,KAAA,CAACT,QAAQ,EACP4J,MAAM,CAAC,UAAU,CACjB/I,IAAI,CAAE4I,UAAW,CACjBlB,MAAM,CAAE,CAAEC,GAAG,CAAE,CAAC,CAAEC,KAAK,CAAE,EAAE,CAAEE,IAAI,CAAE,EAAE,CAAED,MAAM,CAAE,CAAE,CAAE,CAAAP,QAAA,eAEnDxH,IAAA,CAACf,aAAa,EAACgJ,eAAe,CAAC,KAAK,CAAE,CAAC,cACvCjI,IAAA,CAACjB,KAAK,EAACmJ,IAAI,CAAC,QAAQ,CAACG,MAAM,CAAE,CAAC,CAAC,CAAErH,MAAM,GAAK,SAAS,CAAG,EAAE,CAAG,EAAE,CAAE,CAAE,CAAC,cACpEhB,IAAA,CAAChB,KAAK,EACJmJ,OAAO,CAAC,QAAQ,CAChBD,IAAI,CAAC,UAAU,CACfR,KAAK,CAAE,GAAI,CACXwB,IAAI,CAAE,CAAEC,QAAQ,CAAE,EAAG,CAAE,CACxB,CAAC,cACFnJ,IAAA,CAACd,OAAO,GAAE,CAAC,cACXc,IAAA,CAACV,GAAG,EACF6I,OAAO,CAAEnH,MAAM,GAAK,SAAS,CAAG,mBAAmB,CAAGZ,eAAgB,CACtEwI,IAAI,CAAE5H,MAAM,GAAK,SAAS,CAAG,SAAS,CAAG2F,iBAAiB,CAACvG,eAAe,CAAE,CAC5EgI,IAAI,CAAEpH,MAAM,GAAK,SAAS,CAAG,qBAAqB,CAAG,kBAAkB0F,iBAAiB,CAACtG,eAAe,CAAC,MAAO,CACjH,CAAC,EACM,CAAC,CACQ,CAAC,EACnB,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAAgJ,uBAAuB,CAAGA,CAAA,GAAM,CACpC,GAAI,CAACtI,cAAc,CAAE,MAAO,EAAE,CAE9B,KAAM,CAAAqD,MAAM,CAAGjE,IAAI,CAACmJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1E,UAAU,GAAK9D,cAAc,CAAC,CAC9D,GAAI,CAACqD,MAAM,CAAE,MAAO,EAAE,CAEtB,MAAO,CACL,CAAEiE,IAAI,CAAE,aAAa,CAAE5B,KAAK,CAAErC,MAAM,CAACU,UAAU,CAAE0E,KAAK,CAAE5C,iBAAiB,CAAC,YAAY,CAAE,CAAC,CACzF,CAAEyB,IAAI,CAAE,gBAAgB,CAAE5B,KAAK,CAAErC,MAAM,CAACW,aAAa,CAAEyE,KAAK,CAAE5C,iBAAiB,CAAC,eAAe,CAAE,CAAC,CAClG,CAAEyB,IAAI,CAAE,eAAe,CAAE5B,KAAK,CAAErC,MAAM,CAACY,YAAY,CAAEwE,KAAK,CAAE5C,iBAAiB,CAAC,cAAc,CAAE,CAAC,CAC/F,CAAEyB,IAAI,CAAE,cAAc,CAAE5B,KAAK,CAAErC,MAAM,CAACa,WAAW,CAAEuE,KAAK,CAAE5C,iBAAiB,CAAC,aAAa,CAAE,CAAC,CAC7F,CACH,CAAC,CAED;AACA,KAAM,CAAA6C,8BAA8B,CAAGA,CAAA,GAAM,CAC3C,KAAM,CAAAC,cAAc,CAAGL,uBAAuB,CAAC,CAAC,CAChD,KAAM,CAAAM,MAAM,CAAG,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAE3D,mBACE5J,KAAA,QAAKyH,SAAS,CAAC,4DAA4D,CAAAC,QAAA,eACzE1H,KAAA,QAAKyH,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBxH,IAAA,SAAMuH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,gCAAoB,CAAM,CAAC,cAChE1H,KAAA,WACE0G,KAAK,CAAE1F,cAAc,EAAI,EAAG,CAC5B6I,QAAQ,CAAGC,CAAC,EAAK7I,iBAAiB,CAAC6I,CAAC,CAACC,MAAM,CAACrD,KAAK,CAAE,CACnDe,SAAS,CAAC,0CAA0C,CAAAC,QAAA,eAEpDxH,IAAA,WAAQwG,KAAK,CAAC,EAAE,CAAAgB,QAAA,CAAC,oBAAa,CAAQ,CAAC,CACtCtH,IAAI,CAACkD,GAAG,CAACe,MAAM,eACdrE,KAAA,WAAgC0G,KAAK,CAAErC,MAAM,CAACS,UAAW,CAAA4C,QAAA,EACtDrD,MAAM,CAACA,MAAM,CAAC,IAAE,CAACA,MAAM,CAACS,UAAU,CAAC,GACtC,GAFaT,MAAM,CAACS,UAEZ,CACT,CAAC,EACI,CAAC,EACN,CAAC,CAEL9D,cAAc,cACbd,IAAA,CAACb,mBAAmB,EAACuI,KAAK,CAAC,MAAM,CAACC,MAAM,CAAC,KAAK,CAAAH,QAAA,cAC5C1H,KAAA,CAACP,QAAQ,EAAAiI,QAAA,eACPxH,IAAA,CAACR,GAAG,EACFU,IAAI,CAAEuJ,cAAe,CACrBK,EAAE,CAAC,KAAK,CACRC,EAAE,CAAC,KAAK,CACRC,SAAS,CAAE,IAAK,CAChBC,WAAW,CAAE,GAAI,CACjBrB,IAAI,CAAC,SAAS,CACdT,OAAO,CAAC,OAAO,CACf+B,OAAO,CAAC,MAAM,CACdC,KAAK,CAAEC,KAAA,MAAC,CAAChC,IAAI,CAAE5B,KAAK,CAAC,CAAA4D,KAAA,OAAK,GAAGhC,IAAI,KAAK5B,KAAK,GAAG,EAAC,CAAAgB,QAAA,CAE9CiC,cAAc,CAACrG,GAAG,CAAC,CAACiH,KAAK,CAAEC,KAAK,gBAC/BtK,IAAA,CAACP,IAAI,EAAuBmJ,IAAI,CAAEc,MAAM,CAACY,KAAK,CAAGZ,MAAM,CAACzG,MAAM,CAAE,EAArD,QAAQqH,KAAK,EAA0C,CACnE,CAAC,CACC,CAAC,cACNtK,IAAA,CAACd,OAAO,EAACqL,SAAS,CAAG/D,KAAK,EAAK,GAAGA,KAAK,GAAI,CAAE,CAAC,cAC9CxG,IAAA,CAACN,MAAM,GAAE,CAAC,EACF,CAAC,CACQ,CAAC,cAEtBM,IAAA,QAAKuH,SAAS,CAAC,yCAAyC,CAAAC,QAAA,cACtDxH,IAAA,MAAAwH,QAAA,CAAG,sFAA6D,CAAG,CAAC,CACjE,CACN,EACE,CAAC,CAEV,CAAC,CAED;AACA,KAAM,CAAAgD,qBAAqB,CAAGA,CAAA,GAAM,CAClC,GAAI5J,QAAQ,GAAK,aAAa,CAAE,CAC9B,mBACEd,KAAA,QAAKyH,SAAS,CAAC,kDAAkD,CAAAC,QAAA,eAC/DxH,IAAA,OAAIuH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,8BAAkB,CAAI,CAAC,cACtDxH,IAAA,MAAAwH,QAAA,CACGlH,YAAY,CAAC0E,WAAW,CAAG,GAAG,CAC7B,8KAA8K,CAC/K1E,YAAY,CAAC0E,WAAW,CAAG,CAAC,GAAG,CAC9B,6KAA6K,CAC7K,uKAAuK,CAExK,CAAC,cACJhF,IAAA,MAAGuH,SAAS,CAAC,MAAM,CAAAC,QAAA,CAChBlH,YAAY,CAACyE,YAAY,CAAG,CAAC,GAAG,CAC/B,+LAA+L,CAC/L,uEAAuE,CAExE,CAAC,cACJ/E,IAAA,MAAGuH,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,qNAEpB,CAAG,CAAC,EACD,CAAC,CAEV,CAAC,IAAM,IAAI5G,QAAQ,GAAK,eAAe,CAAE,CACvC,mBACEd,KAAA,QAAKyH,SAAS,CAAC,kDAAkD,CAAAC,QAAA,eAC/DxH,IAAA,OAAIuH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,2BAAe,CAAI,CAAC,cACnDxH,IAAA,MAAAwH,QAAA,CAAG,0MAGH,CAAG,CAAC,cACJ1H,KAAA,MAAGyH,SAAS,CAAC,MAAM,CAAAC,QAAA,EAChBpH,eAAe,GAAK,aAAa,EAChC,gIAAgI,CACjIA,eAAe,GAAK,YAAY,EAC/B,8JAA8J,CAC/JA,eAAe,GAAK,eAAe,EAClC,mJAAmJ,CACpJA,eAAe,GAAK,cAAc,EACjC,oIAAoI,EACrI,CAAC,EACD,CAAC,CAEV,CAAC,IAAM,IAAIQ,QAAQ,GAAK,qBAAqB,CAAE,KAAA6J,UAAA,CAAAC,WAAA,CAC7C,mBACE5K,KAAA,QAAKyH,SAAS,CAAC,kDAAkD,CAAAC,QAAA,eAC/DxH,IAAA,OAAIuH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAAC,gCAAoB,CAAI,CAAC,CACvD1G,cAAc,cACbhB,KAAA,MAAA0H,QAAA,GAAAiD,UAAA,CACGvK,IAAI,CAACmJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1E,UAAU,GAAK9D,cAAc,CAAC,UAAA2J,UAAA,iBAA/CA,UAAA,CAAiDtG,MAAM,CAAC,sCAA0B,CAAC4C,YAAY,EAAA2D,WAAA,CAACxK,IAAI,CAACmJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1E,UAAU,GAAK9D,cAAc,CAAC,UAAA4J,WAAA,iBAA/CA,WAAA,CAAiDlG,iBAAiB,CAAC,CAAC,oFACnG,CAChE,CAAC,IAAM,CACL,KAAM,CAAAL,MAAM,CAAGjE,IAAI,CAACmJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1E,UAAU,GAAK9D,cAAc,CAAC,CAC9D,GAAI,CAACqD,MAAM,CAAE,MAAO,EAAE,CAEtB,KAAM,CAAAwG,QAAQ,CAAG5E,IAAI,CAAC6E,GAAG,CACvBzG,MAAM,CAACU,UAAU,CACjBV,MAAM,CAACW,aAAa,CACpBX,MAAM,CAACY,YAAY,CACnBZ,MAAM,CAACa,WACT,CAAC,CAED,GAAI2F,QAAQ,GAAKxG,MAAM,CAACU,UAAU,CAAE,MAAO,aAAa,CACxD,GAAI8F,QAAQ,GAAKxG,MAAM,CAACW,aAAa,CAAE,MAAO,gBAAgB,CAC9D,GAAI6F,QAAQ,GAAKxG,MAAM,CAACY,YAAY,CAAE,MAAO,eAAe,CAC5D,GAAI4F,QAAQ,GAAKxG,MAAM,CAACa,WAAW,CAAE,MAAO,cAAc,CAC1D,MAAO,EAAE,CACX,CAAC,EAAE,CAAC,CACL,MAAI,CACH,CAAC,IAAM,CACL,KAAM,CAAAb,MAAM,CAAGjE,IAAI,CAACmJ,IAAI,CAACC,CAAC,EAAIA,CAAC,CAAC1E,UAAU,GAAK9D,cAAc,CAAC,CAC9D,GAAI,CAACqD,MAAM,CAAE,MAAO,EAAE,CAEtB,KAAM,CAAAwG,QAAQ,CAAG5E,IAAI,CAAC6E,GAAG,CACvBzG,MAAM,CAACU,UAAU,CACjBV,MAAM,CAACW,aAAa,CACpBX,MAAM,CAACY,YAAY,CACnBZ,MAAM,CAACa,WACT,CAAC,CAED,MAAO,CAAA2F,QAAQ,CACjB,CAAC,EAAE,CAAC,CACL,0BACH,EAAG,CAAC,cAEJ3K,IAAA,MAAAwH,QAAA,CAAG,iHAAsF,CAAG,CAC7F,cACDxH,IAAA,MAAGuH,SAAS,CAAC,MAAM,CAAAC,QAAA,CAAC,sNAEpB,CAAG,CAAC,EACD,CAAC,CAEV,CAEA,MAAO,KAAI,CACb,CAAC,CAED,GAAIhH,OAAO,CAAE,CACX,mBACER,IAAA,QAAKuH,SAAS,CAAC,2CAA2C,CAAAC,QAAA,cACxDxH,IAAA,MAAAwH,QAAA,CAAG,8BAAoB,CAAG,CAAC,CACxB,CAAC,CAEV,CAEA,GAAI9G,KAAK,CAAE,CACT,mBACEZ,KAAA,QAAKyH,SAAS,CAAC,2CAA2C,CAAAC,QAAA,eACxD1H,KAAA,MAAGyH,SAAS,CAAC,cAAc,CAAAC,QAAA,EAAC,UAAQ,CAAC9G,KAAK,EAAI,CAAC,cAC/CV,IAAA,MAAAwH,QAAA,CAAG,wGAA+E,CAAG,CAAC,EACnF,CAAC,CAEV,CAEA,mBACE1H,KAAA,QAAKyH,SAAS,CAAC,6BAA6B,CAAAC,QAAA,eAC1CxH,IAAA,OAAIuH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,gGAAqE,CAAI,CAAC,cAE7G1H,KAAA,QAAKyH,SAAS,CAAC,6CAA6C,CAAAC,QAAA,eAC1D1H,KAAA,QAAKyH,SAAS,CAAC,wBAAwB,CAAAC,QAAA,eACrCxH,IAAA,SAAMuH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,6BAAsB,CAAM,CAAC,cAClExH,IAAA,QAAKuH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,CAC5B,CAAC,aAAa,CAAE,YAAY,CAAE,eAAe,CAAE,cAAc,CAAC,CAACpE,GAAG,CAAEiD,SAAS,eAC5ErG,IAAA,WAEEgJ,OAAO,CAAEA,CAAA,GAAMpC,qBAAqB,CAACP,SAAS,CAAE,CAChDkB,SAAS,CAAE,qBACTnH,eAAe,GAAKiG,SAAS,CACzB,wBAAwB,CACxB,+BAA+B,EAClC,CAAAmB,QAAA,CAEFd,iBAAiB,CAACL,SAAS,CAAC,EARxBA,SASC,CACT,CAAC,CACC,CAAC,EACH,CAAC,cAENvG,KAAA,QAAKyH,SAAS,CAAC,mBAAmB,CAAAC,QAAA,eAChCxH,IAAA,SAAMuH,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,kBAAgB,CAAM,CAAC,cAC5D1H,KAAA,QAAKyH,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BxH,IAAA,WACEgJ,OAAO,CAAEA,CAAA,GAAMnC,oBAAoB,CAAC,aAAa,CAAE,CACnDU,SAAS,CAAE,qBACT3G,QAAQ,GAAK,aAAa,CACtB,wBAAwB,CACxB,+BAA+B,EAClC,CAAA4G,QAAA,CACJ,gBAED,CAAQ,CAAC,cACTxH,IAAA,WACEgJ,OAAO,CAAEA,CAAA,GAAMnC,oBAAoB,CAAC,eAAe,CAAE,CACrDU,SAAS,CAAE,qBACT3G,QAAQ,GAAK,eAAe,CACxB,wBAAwB,CACxB,+BAA+B,EAClC,CAAA4G,QAAA,CACJ,uBAED,CAAQ,CAAC,cACTxH,IAAA,WACEgJ,OAAO,CAAEA,CAAA,GAAMnC,oBAAoB,CAAC,qBAAqB,CAAE,CAC3DU,SAAS,CAAE,qBACT3G,QAAQ,GAAK,qBAAqB,CAC9B,wBAAwB,CACxB,+BAA+B,EAClC,CAAA4G,QAAA,CACJ,gCAED,CAAQ,CAAC,EACN,CAAC,EACH,CAAC,CAELlH,YAAY,CAACF,eAAe,CAAC,GAAKyK,SAAS,EAAIjK,QAAQ,GAAK,aAAa,eACxEd,KAAA,QAAKyH,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnBxH,IAAA,SAAMuH,SAAS,CAAC,eAAe,CAAAC,QAAA,CAAC,+BAAwB,CAAM,CAAC,CAAC,GAAG,cACnExH,IAAA,SAAMuH,SAAS,CAAE,GACfjH,YAAY,CAACF,eAAe,CAAC,CAAG,GAAG,CAAG,0BAA0B,CAChEE,YAAY,CAACF,eAAe,CAAC,CAAG,CAAC,GAAG,CAAG,wBAAwB,CAC/D,eAAe,EACd,CAAAoH,QAAA,CACAjB,iBAAiB,CAACjG,YAAY,CAACF,eAAe,CAAC,CAAC,CAC7C,CAAC,CACNE,YAAY,CAACF,eAAe,CAAC,CAAG,GAAG,CAClC,iCAAiC,CACjCE,YAAY,CAACF,eAAe,CAAC,CAAG,CAAC,GAAG,CACpC,iCAAiC,CACjC,gCAAgC,EAC/B,CACN,EACE,CAAC,CAELQ,QAAQ,GAAK,aAAa,EAAI6G,sBAAsB,CAAC,CAAC,CACtD7G,QAAQ,GAAK,eAAe,EAAIiI,wBAAwB,CAAC,CAAC,CAC1DjI,QAAQ,GAAK,qBAAqB,EAAI4I,8BAA8B,CAAC,CAAC,CAEtEgB,qBAAqB,CAAC,CAAC,EACrB,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}